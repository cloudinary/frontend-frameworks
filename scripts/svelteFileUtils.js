const replace = require('replace-in-file');
const { findLineNumber, joinLines, getFileLines, replaceFromToWith, writeLinesToFile } = require('./fileUtils');

/**
 * Functions in this file are used in buildDocs.js to update the svelte docs after they are automatically generated
 * by jsDoc. This is needed because jsDoc does not parse svelte files correctly, and we're generating svelte's docs
 * from mock files that need some fixes after jsDoc is done generating.
 */

/**
 * Wraps svelte code from given file with pre & code tags
 * @param fileName
 * @return {*}
 */
const getSvelteCodeTag = (fileName) => {
  // get content from svelte file
  const svelteContent = getFileLines(fileName).map(line=>(
    // Fix <img> markup inside <pre><code>
    // Without this, no content will be shown for these lines
    line.includes('<img') ? line.replace('<img', '&lt;img').replace('/>', '/&gt;') : line
  ));

  return joinLines([
    '<pre class="prettyprint source language-javascript line-numbers"><code class="language-javascript">',
    ...svelteContent,
    '</code></pre>'
  ]);
};

/**
 * Fix links in svelte docs to point to svelte/src/AdvancedImage.svelte
 */
const fixLinksInSvelteFiles = () => {
  let replaceOptions = {
    files: ['public/docs/SvelteSDK.AdvancedImage.html', 'public/docs/SvelteSDK.html'],
    from: /svelte_jsdocs_AdvancedImage.tsx.html/g,
    to: 'svelte_AdvancedImage.svelte.html',
  };
  replace.sync(replaceOptions);

  // Fix links in SvelteSDK.AdvancedImage.html
  replaceOptions = {
    files: ['public/docs/SvelteSDK.AdvancedImage.html', 'public/docs/SvelteSDK.html'],
    from: /svelte\/jsdocs\/AdvancedImage.tsx/g,
    to: 'svelte/src/AdvancedImage.svelte',
  };
  replace.sync(replaceOptions);
};

/**
 * Replace svelte AdvancedImage doc files content with
 * content from the actual svelte/src/AdvancedImage.svelte
 */
const fixAutoGeneratedSvelteAdvancedImageDocs = () => {
  fixLinksInSvelteFiles();
  let svelteHtml = getSvelteCodeTag('frameworks/svelte/src/AdvancedImage.svelte');
  replaceFromToWith('public/docs/svelte_AdvancedImage.svelte.html', '<pre ', '/pre>', svelteHtml);
};

/**
 * Generate svelte mock jsdoc from react component file
 * @param reactComponentFile
 * @param fromStr
 * @param toStr
 * @param svelteExampleFile - contains svelte example
 * @return {*[]}
 */
const getSvelteMockJsdocContent = (reactComponentFile, fromStr, toStr, svelteExampleFile) => {
  // Get content of react component,
  const startIdx = findLineNumber(reactComponentFile, fromStr) -1;
  const endIdx = findLineNumber(reactComponentFile, toStr);

  // Replace the 'react' with 'svelte'
  const content = getFileLines(reactComponentFile)
    .slice(startIdx, endIdx+1)
    .map(line=>line.replace('react', 'svelte').replace('React','Svelte'));

  // Replace react example with svelte example
  const fromStartToExample = content.slice(0, content.findIndex(line=>line.includes('@example')));
  const example = getFileLines(svelteExampleFile).slice(1);
  const fromExampleToMember = content.slice(content.findIndex(line=>line.includes('@memberOf'))-1, content.length-1);

  return [
    ...fromStartToExample,
    ...example,
    ...fromExampleToMember
  ];
}

const createSvelteMockAdvancedImage = () => {
  // Get mock content
  const lines = getSvelteMockJsdocContent(
    'frameworks/react/src/AdvancedImage.tsx',
    'mixin',
    'class AdvancedImage',
    'frameworks/svelte/jsdocs/AdvancedImageExample.js'
  );

  // Add a minimal closed class definition
  lines.push('class AdvancedImage{}');

  // Create the file that will be parsed by jsDoc
  writeLinesToFile('frameworks/svelte/jsdocs/AdvancedImage.tsx', lines);
}

module.exports = { createSvelteMockAdvancedImage, fixAutoGeneratedSvelteAdvancedImageDocs };