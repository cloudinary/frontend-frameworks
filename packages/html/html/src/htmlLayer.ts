import TransformableImage from "@cloudinary/base/transformation/TransformableImage";

export class HtmlLayer{
  private img: any;
  constructor(element: any, transformableImage: TransformableImage, plugins: any, canceled: any){
    this.img = element;

    this.render(element, transformableImage, plugins, canceled)
      .then(()=>{ // when resolved updates the src
        this.img.setAttribute('src', transformableImage.toURL());
      });
  }

  /**
   * Iterate through plugins and break in cases where the response is canceled
   * the response is canceled if component is updated or unmounted
   * @param element Image element
   * @param transformableImage generated by cloudinary/base by the user
   * @param plugins array of plugins passed in by the user
   * @param canceled array that holds the state of canceled plugins
   * @return {Promise<void>}
   */
  async render(element: any, transformableImage: TransformableImage, plugins: any, canceled: any) {
    for(let i = 0; i < plugins.length; i++){
      const response = await plugins[i](element, transformableImage, canceled);
      if(response === 'canceled'){
        break;
      }
    }
  }

  /**
   * Called when component is updated and re-triggers render
   * @param transformableImage
   * @param plugins
   * @param canceled
   */
  update(transformableImage: TransformableImage, plugins: any, canceled: any){
    this.render(this.img, transformableImage, plugins, canceled)
      .then(()=>{
        this.img.setAttribute('src', transformableImage.toURL());
      });
  }
}
